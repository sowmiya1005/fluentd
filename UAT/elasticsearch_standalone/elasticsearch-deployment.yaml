apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: idbi-efk-es-cluster
  annotations:
    # Having this annotation so that headless service always registers the IP address irrespective of probe status.
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: idbi-efk
spec:
  serviceName: idbi-efk-es-svc-h
  replicas: 3
  selector:
    matchLabels:
      app: idbi-efk-es-cluster
  template:
    metadata:
      labels:
        app: idbi-efk-es-cluster
    spec:
      terminationGracePeriodSeconds: 10
      affinity:
        # Pods will be placed in the worker node that has the label es-node=internaldatastore
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: efk-node
                operator: In
                values:
                  - efk

      # Toleration condition for Pods when the node is tainted and the subsequent effect
      tolerations:
      - key: "node-role.kubernetes.io/efk_elasticsearch"
        operator: "Exists"
        effect: "NoSchedule"
      initContainers:
      - name: fix-permissions
        image: 10.143.140.124:5010/busybox
        command: ["sh", "-c", "chown -R 1000:1000 /usr/share/elasticsearch/data"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: esdata
          mountPath: /usr/share/elasticsearch/data
      - name: increase-vm-max-map
        image: 10.143.140.124:5010/busybox
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      - name: increase-fd-ulimit
        image: 10.143.140.124:5010/busybox
        command: ["sh", "-c", "ulimit -n 65536"]
        securityContext:
          privileged: true
      containers:
      - name: idbi-efk-es-server
        image: 10.143.140.124:5010/elasticsearch-oss:7.7.1
        resources:
          limits:
            cpu: "1"
            memory: "2Gi"
          requests:
            cpu: "0.25"
            memory: "1Gi"
        ports:
        - containerPort: 9200
          name: rest-api
          protocol: TCP
        - containerPort: 9300
          name: inter-node-comm
          protocol: TCP
        volumeMounts:
        - name: esdata
          mountPath: /usr/share/elasticsearch/data
        env:
          - name: cluster.name
            value: SAG_EventDataStore
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: node.master
            value: "true"
          - name: node.ingest
            value: "true"
          - name: node.data
            value: "true"
          - name: discovery.seed_hosts
            value: "idbi-efk-es-cluster-0.idbi-efk-es-svc-h.idbi-efk.svc.cluster.local:9300,idbi-efk-es-cluster-1.idbi-efk-es-svc-h.idbi-efk.svc.cluster.local:9300, idbi-efk-es-cluster-2.idbi-efk-es-svc-h.idbi-efk.svc.cluster.local:9300"
          - name: cluster.initial_master_nodes
            value: "idbi-efk-es-cluster-0,idbi-efk-es-cluster-1,idbi-efk-es-cluster-2"
          - name: ES_JAVA_OPTS
            value: "-Xms512m -Xmx512m"
        readinessProbe:
          exec:
           command:
           - /bin/sh
           - -c
           - |
             #!/usr/bin/env bash -e
               HTTP_CODE=$(curl --output /dev/null -XGET -s -k "$@" ${BASIC_AUTH} "http://127.0.0.1:9200/_cluster/health?local=true" -w %{http_code})
               RC=$?
               if [[ ${RC} -ne 0 ]]; then
                 echo "Probe failed with RC ${RC}"
                 exit ${RC}
               fi
               if [[ ${HTTP_CODE} == "200" ]] || [[ ${HTTP_CODE} == "503" ]]; then
                exit 0
               else
                 echo "Probe failed with HTTP code ${HTTP_CODE}"
                 exit 1
               fi
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 5
        livenessProbe:
           exec:
            command:
            - /bin/sh
            - -c
            - |
              #!/usr/bin/env bash -e
                HTTP_CODE=$(curl --output /dev/null -XGET -s -k "$@" ${BASIC_AUTH} "http://127.0.0.1:9200/_cluster/health?local=true" -w %{http_code})
                RC=$?
                if [[ ${RC} -ne 0 ]]; then
                  echo "Probe failed with RC ${RC}"
                  exit ${RC}
                fi
                if [[ ${HTTP_CODE} == "200" ]] || [[ ${HTTP_CODE} == "503" ]]; then
                 exit 0
                else
                 echo "Probe failed with HTTP code ${HTTP_CODE}"
                 exit 1
                fi
           initialDelaySeconds: 10
           periodSeconds: 10
           failureThreshold: 5


  volumeClaimTemplates:
  - metadata:
      name: esdata
      labels:
        type: efk-elasticsearch-pvc
    spec:
      storageClassName: nfs-storage-efk-elastic
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 100Gi

